<template>
	<view class="ui-box">
		<u-navbar @rightClick="handleBack" placeholder :autoBack="true" />
		<view class="ui-logo">
			<text class="logo-text">{{ type === 'set' ?  '设置电子围栏' : '获取位置信息' }}</text>
		</view>
		<view class="ui-map">
			<map id="map" ref="map" style="height: 563rpx;width: 100%;" :latitude="latitude" :longitude="longitude"
				:markers="covers" :circles="circles">
			</map>
		</view>
		<view class="ui-set">
			<view class="address-set">
				<text class="label">
					地址
				</text>
				<view class="input">
					<text class="input-text" @click="goSearch">{{siteInfo || '请输入地址'}}</text>
				</view>
			</view>
			<view class="radius-set">
				<view class="radius-set-title">
					<text class="title-text">
						设置半径长度
					</text>
					<text class="radius-show">{{sliderValue}}米</text>
				</view>
				<view class="slider">

					<u-slider @change="onSlider" max="500" v-model="sliderValue" activeColor="#eeaa3d"
						blockColor="#eeaa3d" inactiveColor="#c0c4cc" />
					<!-- 			<text class="radius-show">{{sliderValue}}米</text> -->
				</view>
			</view>
		</view>
		<view class="address-list">
			<view class="address-list-title">
				<text class="title-icon"></text>
				地址列表
			</view>
			<view class="list-item" v-for="(n, index) in poiList" :key="index" @click="mapMarker(n)">
				<text class="list-item-label">
					{{ n.name }}
				</text>
				<u-icon name="/static/images/position.png" size="44rpx" style="margin-right: 6rpx;" />
			</view>
		</view>
		<view class="ui-btn">
			<text class="btn-default" @click="handleSubmit">提交</text>
			<!-- <button class="default">提交</button> -->
		</view>
	</view>
</template>

<script>
	import {
		mapState,
	} from 'vuex';
	import {
		push
	} from '@/common/sdk/push.js';
	import {
		isApp
	} from '../../common/utils/util';
	import {
		PostAddFence,
	} from '@/common/http/api.js';
	let mapSearch;
	if (isApp()) mapSearch = weex.requireModule('mapSearch');
	export default {
		data() {
			return {
				type: 'set',
				siteInfo: '', //地址信息
				latitude: 39.909,
				longitude: 116.39742,
				covers: [],
				circles: [],
				sliderValue: 200, //半径
				poiList: [], //搜索地址
				registrationId: '', //设备编码
			}
		},
		created() {
			this.getRegistrationID()
			this.handleGetLocation()
		},
		computed: {
			...mapState({
				deviceInfo: state => state.deviceInfo
			}, ),
		},
		methods: {
			mapMarker(data) {
				const {
					province,
					city,
					district,
					address,
					location: {
						latitude,
						longitude
					}
				} = data
				this.siteInfo = province + city + district + address
				this.latitude = latitude
				this.longitude = longitude
				this.covers[0] = {
					latitude,
					longitude,
					iconPath: '../../static/images/mapSite.png'
				}
				this.circles[0] = {
					latitude,
					longitude,
					color: '#3B7AFF',
					strokeWidth: 1,
					radius: this.sliderValue,
					fillColor: 'rgba(100,163,242,0.50)'
				}
				this.covers = [...this.covers]
				this.circles = [...this.circles]
				console.log(this.covers, '99999')
				this.$forceUpdate()
			},
			/**
			 * 跳转搜索
			 */
			goSearch() {
				uni.navigateTo({
					url: '/pages/equipment/search'
				})
			},

			/**
			 * 半径滑动
			 */
			onSlider(e) {
				if (this.circles.length) {
					this.circles[0].radius = e
					this.circles = [...this.circles]
					this.circles = [...this.circles]
				}
			},
			/**
			 * 获取当前定位
			 */
			handleGetLocation() {
				uni.showLoading({
					title: '加载中'
				})
				uni.getLocation({
					geocode: true,
					type: 'gcj02',
					success: (res) => {
						mapSearch && mapSearch.poiSearchNearBy({
							point: res,
							key: '小区'
						}, res => {
							const {
								poiList
							} = res;
							if (poiList && poiList.length) {
								this.poiList = poiList.length > 4 ? poiList.slice(0, 4) : poiList
							}
						})
						// console.log(res, 'ssssssssss')
						// this.mapMarker(res)
						const {
							latitude,
							longitude,
							address: {
								province,
								city,
								district,
								street,
								streetNum,
								poiName
							},
						} = res
						this.latitude = latitude
						this.longitude = longitude
						this.siteInfo = province + city + district + street + streetNum + poiName
						this.covers[0] = {
							latitude,
							longitude,
							iconPath: '../../static/images/mapSite.png'
						}
						this.circles[0] = {
							latitude,
							longitude,
							color: '#3B7AFF',
							strokeWidth: 1,
							radius: this.sliderValue,
							fillColor: 'rgba(100,163,242,0.50)'
						}
						this.covers = [...this.covers]
						this.circles = [...this.circles]
						uni.hideLoading()
					},
					false: (res) => {
						console.log(res, 'error')
						uni.hideLoading()
					}
				})
			},
			/**
			 * 获取登录设备注册号
			 */
			getRegistrationID() {
				isApp() && push.getRegistrationID().then(res => {
					if (res) this.registrationId = res;
				});
			},
			/**
			 * 保存
			 */
			handleSubmit() {
				const {
					// deviceId,
					siteInfo: address,
					longitude,
					latitude,
					sliderValue,
				} = this
				if (this.type !== 'set') {
					const val = {
						siteInfo: address,
						longitude,
						latitude,
						sliderValue
					}
					uni.$emit('getMapData', val);
					uni.navigateBack()
					return
				}
				if (sliderValue === 0) {
					return uni.$u.toast('半径长度大于0')
				}
				PostAddFence({
					fenceType: 'circle',
					deviceId: this.deviceInfo.deviceId,
					deviceNo: this.deviceInfo.no,
					address,
					longitude,
					latitude,
					radius: sliderValue + '',
				}).then(res => {
					uni.navigateBack()
					uni.$u.toast(res.msg)
				})
			},
		},
		handleBack() {
			uni.navigateBack()
		},
		onShow() {
			uni.$on('searchData', data => {
				this.mapMarker(data)
			})
		},
		onLoad(options) {
			this.type = options.type
		}
	}
</script>

<style lang="scss" scoped>
	.ui-box {
		background-color: rgb(247, 247, 247);
	}

	.ui-logo {
		background-color: #fff;
		padding: 10rpx 32rpx 30rpx 32rpx;

		.logo-text {
			font-size: 50rpx;
			color: #353535;
			font-weight: 600;
		}
	}

	.ui-map {
		background-color: #fff;
		padding: 20rpx 32rpx;
	}

	.ui-set {
		margin-top: 20rpx;
		background-color: #fff;
		padding: 0 32rpx;

		.address-set {
			height: 128rpx;
			display: flex;
			flex-direction: row;
			justify-content: space-between;
			align-items: center;
			border-bottom: solid 2px #f7f7f7;

			.label {
				font-size: 34rpx;
				width: 150rpx;
				color: #353535;
			}

			.input {
				flex: 1;
				// width: 220rpx;

				.input-text {
					font-size: 30rpx;
					color: #D4D4D4;
				}
			}
		}

		.radius-set {
			.radius-set-title {
				height: 128rpx;
				display: flex;
				justify-content: space-between;
				align-items: center;
				flex-direction: row;

				.title-text {
					font-size: 34rpx;
					color: #353535;
				}

				.radius-show {
					font-size: 34rpx;
					color: #353535;
				}
			}

			.slider {
				// margin-top: 20rpx;
				box-sizing: border-box;
				// display: flex;
				// justify-content: space-between;
				// align-items: center;
				// flex-direction: row;
				// height: 80rpx;
			}
		}
	}

	.address-list {
		margin-top: 20rpx;
		background-color: #fff;
		padding: 0 32rpx;

		.address-list-title {
			height: 100rpx;
			display: flex;
			flex-direction: row;
			align-items: center;
			font-size: 36rpx;
			color: #FEAE43;
			font-weight: 600;
			border-bottom: solid 2px #f7f7f7;

			.title-icon {
				height: 50rpx;
				border-left: solid 10rpx #FEAE43;
				// border-radius: 4rpx;
				margin-right: 20rpx;
			}
		}

		.list-item {
			// padding: 48rpx 32rpx;
			height: 128rpx;
			display: flex;
			flex-direction: row;
			align-items: center;
			justify-content: space-between;
			border-bottom: solid 2px #f7f7f7;

			.list-item-label {
				font-size: 34rpx;
				color: #353535;
			}
		}
	}

	.ui-btn {
		padding: 32rpx 0;
		margin-top: 50rpx;
		display: flex;
		align-items: center;

		.btn-default {
			width: 680rpx;
			margin: 0 auto;
			height: 88rpx;
			line-height: 88rpx;
			text-align: center;
			color: #fff;
			background-color: #FFB24D;
			border-radius: 31px;
		}
	}
</style>
